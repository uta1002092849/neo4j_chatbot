{
  "Return a list of all fields  and their average precipitation": [
    [
      "MATCH (f:Field)<-[:weatherAtField]-(w:WeatherObservation)\nWITH f.fieldId AS fieldId, f.fieldLatitude AS latitude, f.fieldLongitude AS longitude, AVG(w.precipitation) AS avgPrecipitation\nRETURN fieldId, latitude, longitude, avgPrecipitation",
      "up"
    ],
    [
      "MATCH (f:Field)<-[:weatherAtField]-(w:WeatherObservation)\nRETURN f.fieldId,AVG(w.precipitation)",
      "up"
    ],
    [
      "MATCH (f:Field)<-[:weatherAtField]-(w:WeatherObservation)\nWHERE (w.precipitation) IS NOT NULL AND NOT isNaN(w.precipitation)\nRETURN f.fieldId AS fieldId, ROUND(AVG(w.precipitation),2) AS averagePrecipitation",
      "up"
    ],
    [
      "MATCH (f:Field)<-[:weatherAtField]-(w:WeatherObservation)\nRETURN f.fieldId AS Field, AVG(w.precipitation) AS Average_Precipitation",
      "up"
    ],
    [
      "MATCH (f:Field)\nOPTIONAL MATCH (w:WeatherObservation)\nWHERE f.fieldId = w.fieldId\nRETURN f.fieldId, avg(w.precipitation) AS average_precipitation",
      "down"
    ],
    [
      "MATCH (f:Field)<-[:weatherAtField]-(w:WeatherObservation)\nWITH f.fieldId AS FieldID, w.weatherObservationDate AS date, w.precipitation AS precipitation\nWITH FieldID, date, precipitation,\n     toInteger(substring(date, 0, 4)) AS year,\n     toInteger(substring(date, 5, 2)) AS month\nWITH FieldID,\n    CASE\n        WHEN month IN [1, 2, 3] THEN 'Q1'\n        WHEN month IN [4, 5, 6] THEN 'Q2'\n        WHEN month IN [7, 8, 9] THEN 'Q3'\n        ELSE 'Q4'\n    END AS quarter,\n    precipitation\nWITH FieldID, quarter, SUM(precipitation) AS totalPrecipitation\nRETURN FieldID, quarter, round(totalPrecipitation, 3) AS totalPrecipitation\nORDER BY FieldID, quarter",
      "up"
    ]
  ],
  "Return all experimental unit": [
    [
      "MATCH (u:ExperimentalUnit) RETURN u.expUnit_UID AS Experimental_unit",
      "up"
    ]
  ],
  "Return all experimental units and their attributes": [
    [
      "MATCH (u:ExperimentalUnit) RETURN u.expUnit_UID AS Experimental_unit, u.expUnitStartDate AS Experimental_unit_start_date, u.expUnitEndDate AS Experimental_unit_end_date, u.expUnitSize AS Experimental_unit_size, u.fieldSlopePercent AS Experimental_unit_field_slope_percent, u.landscapePosition AS Experimental_unit_landscape_position, u.expUnitChangeInManagement AS Experimental_unit_change_in_management",
      "up"
    ]
  ],
  "Return all field and their corresponding precipitation": [
    [
      "MATCH (f:Field)<-[:weatherAtField]-(w:WeatherObservation)\nWITH f.fieldId AS fieldId, w.precipitation AS precipitation\nRETURN fieldId, precipitation",
      "down"
    ],
    [
      "MATCH (f:Field)<-[:weatherAtField]-(w:WeatherObservation) RETURN f.fieldId, w.precipitation",
      "down"
    ],
    [
      "MATCH (f:Field)<-[:weatherAtField]-(w:WeatherObservation)\nRETURN f.fieldId, w.precipitation",
      "down"
    ]
  ],
  "Return all fields": [
    [
      "MATCH (f:Field) RETURN f.fieldId",
      "up"
    ]
  ],
  "Return all fields and their corresponding attribute": [
    [
      "MATCH (f:Field) RETURN f.fieldId, f.fieldLatitude, f.fieldLongitude, f.fieldElevation",
      "down"
    ]
  ],
  "Given experimental unit NELITCSE_101, list all treatments applied to its, including treatment start date and end date": [
    [
      "MATCH (t:Treatment)-[:appliedInExpUnit]->(e:ExperimentalUnit)\nWHERE e.expUnit_UID = 'NELITCSE_101'\nRETURN t.treatmentDescriptor AS treatment, t.treatmentStartDate AS start_date, t.treatmentEndDate AS end_date",
      "up"
    ]
  ],
  "Return a list of all fields": [
    [
      "MATCH (f:Field)\nRETURN f.fieldId AS Field_id",
      "up"
    ],
    [
      "MATCH (f:Field) RETURN f.fieldId AS Field_ID",
      "up"
    ]
  ],
  "Return all research paper conducted on field NELITCSE": [
    [
      "MATCH path =(f:Field)<-[:hasField]-(s:Site)<-[:studiesSite]-(p:Publication) WHERE f.fieldId = \"NELITCSE\" RETURN p.publicationTitle as Title, p.publicationAuthor as Author, p.publicationDate as publicationDate, p.publicationIdentifier as Reference ORDER BY p.publicationDate",
      "up"
    ]
  ],
  "Return all research paper conducted on field NEMEIRR": [
    [
      "MATCH (e:Experiment)-[:happenedInSite]->(s:Site)-[:hasField]->(f:Field) WHERE f.fieldId = \"NEMEIRR\" RETURN e.experimentName",
      "up"
    ]
  ],
  "Return a list of experimental unit id": [
    [
      "MATCH (eu:ExperimentalUnit) RETURN eu.expUnit_UID",
      "up"
    ],
    [
      "MATCH (u:ExperimentalUnit) RETURN u.expUnit_UID as expUnit_UID",
      "up"
    ]
  ],
  "Return a list of all": [
    [
      "MATCH (f:Field) RETURN f.fieldId AS Field_ID",
      "up"
    ]
  ],
  "Return a list of all field": [
    [
      "MATCH (f:Field)\nRETURN f.fieldId AS FieldId",
      "down"
    ]
  ],
  "Return a list of all experimental unit": [
    [
      "MATCH (u:ExperimentalUnit) RETURN u.expUnit_UID AS Experimental_unit",
      "up"
    ],
    [
      "MATCH (f:Field) RETURN f.fieldId AS Field_ID",
      "up"
    ]
  ],
  "Return a list of fields. For each field, return total number of experiemntal unit located on that fields": [
    [
      "MATCH (f:Field)<-[:locatedInField]-(e:ExperimentalUnit) RETURN f.fieldId AS fieldId, count(e) AS numberOfExpUnit",
      "up"
    ]
  ],
  "Return a list of fields": [
    [
      "MATCH (f:Field)<-[:locatedInField]-(e:ExperimentalUnit) RETURN f.fieldId, COUNT(DISTINCT e.expUnit_UID)",
      "up"
    ],
    [
      "MATCH (f:Field) RETURN f.fieldId AS Field_ID",
      "down"
    ],
    [
      "MATCH (f:Field) RETURN f.fieldId AS Field_ID, f.fieldLatitude AS Field_Latitude, f.fieldLongitude AS Field_Longitude, f.fieldElevation AS Field_Elevation",
      "down"
    ]
  ],
  "": [
    [
      "MATCH (p:Publication) RETURN p.publicationTitle AS Publication_Title, p.publicationAuthor AS Publication_Author, p.publicationDate AS Publication_Date, p.publicationIdentifier AS Publication_Reference",
      "down"
    ]
  ],
  "Return all Fields. For each field, return the name and the number of Experimental Units it has.": [
    [
      "cypher\nMATCH (f:Field)\nWITH f, f.fieldId AS fieldId\nOPTIONAL MATCH (u:ExperimentalUnit)-[:locatedInField]->(f)\nRETURN f.fieldId AS fieldName, count(u) AS numExpUnits\n",
      "up"
    ]
  ],
  "Return all fields and their respective longitudes and latitudes.": [
    [
      "MATCH (f:Field) RETURN f.fieldId AS FieldId, f.fieldLatitude AS Latitude, f.fieldLongitude AS Longitude",
      "up"
    ]
  ],
  "Return all Fields. For each field, return the name and the number of Experimental Units it has": [
    [
      "cypher\nMATCH (f:Field)\nWITH f, f.fieldId AS fieldId\nOPTIONAL MATCH (u:ExperimentalUnit)-[:locatedInField]->(f)\nRETURN f.fieldId AS fieldName, count(u) AS numExpUnits\n",
      "up"
    ]
  ],
  "Return all Fields": [
    [
      "MATCH (f:Field) RETURN f.fieldId AS FieldId",
      "down"
    ]
  ],
  "Return all Experimental Unit": [
    [
      "MATCH (u:ExperimentalUnit) RETURN u.expUnit_UID AS Experimental_Unit",
      "down"
    ]
  ],
  "Return all experimental unit with their corresponding field": [
    [
      "MATCH (u:ExperimentalUnit)-[:locatedInField]->(f:Field) RETURN u.expUnit_UID AS expUnit, f.fieldId AS fieldId",
      "up"
    ]
  ]
}